def retryCount = 3
def retrySuccess = false

pipeline {
    agent any
    tools {nodejs "node"}
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
    }
    stages {        
        stage('Build') {
            steps {
                script {
                    // Checkout source code from version control (e.g., Git)
                    git branch: "${params.BRANCH}", url: 'https://github.com/DaniHNS/automated-testing.git'
                    // npm check
                    sh 'npm -v'
                    // Install project dependencies
                    sh 'npm install'
                    // Set X11 server - common error fix
                    sh 'Xvfb -screen 0 1920x1080x24 :99 & export DISPLAY=:99'

                    // Save the original build result to an environment variable
                    env.ORIGINAL_BUILD_RESULT = currentBuild.result
                    echo env.ORIGINAL_BUILD_RESULT
                }
            }
        }  
        stage('Run Tests') {
            steps {
                // Run Cypress tests
                sh 'npx cypress run --spec "cypress/e2e/v5/**/*.cy.js" --headless'
            }
        }
          
    }
    post {
        always {
            script {
                def originalBuildResult = env.ORIGINAL_BUILD_RESULT

                if (originalBuildResult == 'FAILURE') {
                    retrySuccess = retryBuild()
                }

                if (!retrySuccess && currentBuild.result == 'FAILURE') {
                    sendFailureEmail()
                }
            }
        }

    }
}


def retryBuild() {
            
    if (originalBuildResult == 'FAILURE') {
        for (int i = 1; i <= retryCount; i++) {
            echo "Job failed (Attempt ${i}/${retryCount}). Retrying in 3 minutes..."
            sleep time: 3, unit: 'MINUTES'
            echo 'Retrying...'

            // Kill X11 server - common error fix
            //sh 'pkill Xvfb'
            
            currentBuild.result = null // Reset the build result

            // Run Cypress tests
            sh 'npx cypress run --spec "cypress/e2e/v5/**/*.cy.js" --headless'
            if (currentBuild.result != 'FAILURE') {
                // Build succeeded on retry, so no need to retry anymore
                return true
            }
        }
        return false
    }
}

def sendFailureEmail() {
    if (currentBuild.result == 'FAILURE') {
        // mail to: "kaske@hotelnetsolutions.de, richter@hotelnetsolutions.de, tehrani@hotelnetsolutions.de, plotkin@hotelnetsolutions.de",
        mail to: "plotkin@hotelnetsolutions.de",
        subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
        body: """${currentBuild.currentResult}: Job ${env.JOB_NAME}
    More Info can be found here: ${env.BUILD_URL}
    Video can be found here: http://jenkins.hns.hotelnetsolutions.de/workspace/BookingE2E-V5/cypress/videos/
    Trigger the Job: http://jenkins.hns.hotelnetsolutions.de:8081/job/BookingE2E-V5/build?token=Gthr1_8"""  
    }
}