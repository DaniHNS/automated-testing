
// Function to run Cypress tests
def runCypressTests() {
    sh 'npx cypress run --spec "cypress/e2e/v5/**/*.cy.js" --headless'
}
def maxRetries = 2
def retryCount = 0
def retryInterval = 20 // seconds
env.retryOccurred = 'false'


pipeline {
    agent any
    environment {
        TWILIO = credentials('Twilio')
    }
    tools {nodejs "node"}
    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
    }
    stages {      
        stage('CleanUp') {
            steps {
                script {
                    sh "git clean -x -f"
                    // npm clear cache
                    sh "rm -rf ~/.cache/Cypress"
                    sh 'npm cache clean --force'
                }
            }
        }  
        stage('Build') {
            steps {
                // Checkout source code from version control (e.g., Git)
                git branch: "${params.BRANCH}",  url: 'https://github.com/DaniHNS/automated-testing.git'
                
                // npm check
                sh 'npm -v'
                // Install project dependencies
                sh 'npm install'
                sh 'npm install -g cypress'
                sh 'cypress install'
                // Set X11 server - common error fix
                sh 'Xvfb -screen 0 1920x1080x24 :99 & export DISPLAY=:99'
                
            }
        }  
        stage('Run Tests') {
            steps {
                script {
                    try {
                        runCypressTests()
                        // If try fails catch block will trigger the test once again after delay
                    } catch (Exception e) {
                        retryCount++
                        echo "Retrying (${retryCount}/${maxRetries})..."
                        env.retryOccurred = 'true'
                        echo "retryOccurred (${env.retryOccurred})..."
                        sleep(time: retryInterval, unit: 'SECONDS')
                        runCypressTests()
                    }
                    
                }
            }
        }
    }
    post {
        always {
            script {
                    try {
                        // Use the credentials in your script
                        withCredentials([usernamePassword(credentialsId: 'Twilio', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            // Inside this block, you can access $USERNAME and $PASSWORD
                            sh "echo Username: \$USERNAME"
                            sh "echo Password: \$PASSWORD"
                        }
                        // Kill X11 server - common error fix
                        sh 'pkill Xvfb'

                        echo 'debugEnvironment variables'
                        echo "Both: $TWILIO"
                        echo "SID: $TWILIO_USR"
                        echo "AUTH_TOKEN: $TWILIO_PSW"

                        // GET
                        // def get = new URL("https://api.twilio.com/2010-04-01/Accounts/AC4e8cda28ac14de11c81b648d58f5c5e4/Messages.json").openConnection();
                        // def getRC = get.getResponseCode();
                        // println(getRC);
                        // echo "test http: - (${getRC})"
                        // if(getRC.equals(200)) {
                        //     println(get.getInputStream().getText());
                        // }

                        // def result = HttpBuilder.configure {
                        //     request.raw = "https://api.twilio.com/2010-04-01/Accounts/AC4e8cda28ac14de11c81b648d58f5c5e4/Messages.json"
                        // }.get()

                        // POST
                        def post = new URL("https://api.twilio.com/2010-04-01/Accounts/ACdc2fbf07b600ebc3664cbaa69c68825c/Messages.json").openConnection();

                        // Payload structure because content-type x-www-form-urlencoded
                        String urlParameters  = "From=+15392081457&To=+4916091961830&Body=this is a HNS TEST message";

                        // Set up HTTP headers for authentication
                        String authString = "ACdc2fbf07b600ebc3664cbaa69c68825c:9799464121df1f0600630a9199402d07"
                        echo "authString"
                        println(authString)
                        byte[] encodedAuth = org.apache.commons.codec.binary.Base64.encodeBase64(authString.getBytes("UTF-8"));
                        echo "encodedAuth"
                        println(encodedAuth)
                        String authHeaderValue = "Basic " + new String(encodedAuth);
                        echo "authHeaderValue"
                        println(authHeaderValue)
                        post.setRequestProperty("Authorization", authHeaderValue)
                        post.setRequestMethod("POST")
                        post.setDoOutput(true)
                        post.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")
                        post.getOutputStream().write(urlParameters.getBytes("UTF-8"));
                        def postRC = post.getResponseCode();
                        println(postRC);
                        if(postRC.equals(200)) {
                            println(post.getInputStream().getText());
                        } else {
                            println(post.getErrorStream().getText());
                        }
                    } catch (Exception e) {
                        echo "Post Always excecution error: - (${e})!"
                    }


            }
        }
        failure {
            script {
                echo "Always - Status/retry(${currentBuild.currentResult}/${env.retryOccurred})..."  
                // Mail conditioned on Failure on both attempts
                if (currentBuild.currentResult == 'FAILURE' && env.retryOccurred == 'true') {
                    echo "Mail sending block - Status/retry(${currentBuild.currentResult}/${env.retryOccurred})..."  

                    mail to: "plotkin@hotelnetsolutions.de",
                    subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}",
                    body: """${currentBuild.currentResult}: Job ${env.JOB_NAME}
                        More Information can be found here: ${env.BUILD_URL}
                        Video can be found here: http://jenkins.hns.hotelnetsolutions.de/workspace/BookingE2E-V5/cypress/videos/
                        Trigger/Start the Job: http://jenkins.hns.hotelnetsolutions.de:8081/job/BookingE2E-V5/build?token=Gthr1_8
                        
                        For comprehensive documentation on the Jenkins Auto-Test process please visit
                        https://hotelnetsolutions.atlassian.net/wiki/spaces/DEV/pages/272728066/Jenkins+Auto-Test+guide"""
                }
            }
        }
    }
}
